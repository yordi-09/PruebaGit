@model ENTIDAD.Proyecto

@{
    ViewBag.Title = "Crear";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<form action="@Url.Action("Crear", "Proyecto")" method="post" id="frmProyecto">
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Crear Nuevo Proyecto</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <label class="control-label col-md-2">Nombre del Proyecto</label>
            <div class="col-md-10">
                <input type="text" class="form-control" id="NombreProyecto" name="NombreProyecto"
                       placeholder="Ingrese nombre del proyecto" />
                @Html.ValidationMessageFor(model => model.NombreProyecto, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Fecha de Inicio</label>
            <div class="col-md-10">
                <input type="date" class="form-control" name="FechaInicio" id="FechaInicio" />
                @Html.ValidationMessageFor(model => model.FechaInicio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Fecha Fin</label>
            <div class="col-md-10">
                <input type="date" class="form-control" name="FechaFin" id="FechaFin" />
                @Html.ValidationMessageFor(model => model.FechaFin, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Crear Proyecto" class="btn btn-primary" />
            </div>
        </div>
    </div>
</form>

<div>
    @Html.ActionLink("Regresar", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")    
    <script>
        $("#frmProyecto").submit(function (event) {
            event.preventDefault(); //prevent default action

            var nombre = $("#NombreProyecto").val();
            var fechaInicio = $("#FechaInicio").val();
            var fechaFin = $("#FechaFin").val();

            if ($.trim(nombre) == "") {
                alert("Debe ingresar el nombre del proyecto!!!");
                return;
            }

            if (fechaInicio == "" || fechaFin == "") {
                alert("Debe ingresar la Fecha de Inicio y la Fecha Fin!!!");
                return;
            }

            if (ValidarFechas(fechaInicio, fechaFin) == false) {
                alert("La Fecha Fin no puede ser menor a la Fecha de Inicio!!!");
                return;
            }

            var post_url = $(this).attr("action"); //get form action url
            var request_method = $(this).attr("method"); //get form GET/POST method
            var form_data = $(this).serializeArray(); //Encode form elements for submission
            console.log(form_data);

            LoadingOverlayShow("#frmProyecto");
            $.ajax({
                url: post_url,
                type: request_method,
                data: form_data
            }).done(function (response) { //
                console.log(response);
                LoadingOverlayHide("#frmProyecto");
                if (response.ok) {
                    alert("Proyecto creado correctamente.");
                    window.location = response.toRedirect;
                }
                else {
                    alert(response.msg);
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                LoadingOverlayHide("#frmProyecto");
                //object jqXHR: es un objeto jqXHR que contiene todos los datos de la solicitud Ajax realizada,
                //    incluyendo la propiedad jqXHR.status que contiene, entre otros posibles, el código de estado HTTP de la respuesta.
                //string textStatus: texto que describe el tipo de error, que puede ser, además de null,
                //        «abort», «timeout», «No Transport» o «parseerror».
                //string errorThrown: si hay un error HTTP, errorThrown contiene el texto de la cabecera HTTP de estado.
                //    Por ejemplo, para un error HTTP 404, errorThrown es «Not found»; para error un HTTP 500 es «Internal Server Error».
            });
        });
    </script>
}
